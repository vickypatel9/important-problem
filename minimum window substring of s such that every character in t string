// Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window.
//If there is no such substring, return the empty string "".

class Solution {
    public String minWindow(String s, String t) {
        Map<Character,Integer> map2=new HashMap<>();
       for(int i=0;i<t.length();i++){
           char c=t.charAt(i);
           map2.put(c,map2.getOrDefault(c,0)+1);
       }
        int i=-1;
        int j=-1;
        String ans="";
        Map<Character,Integer> map1=new HashMap<>();
        int dct=t.length();
        int mct=0;
        while(true){
            boolean f1=false;
            boolean f2=false;
            while(i<s.length()-1&&mct<dct){
                i++;
                f1=true;
                char c=s.charAt(i);
                map1.put(c,map1.getOrDefault(c,0)+1);
                if(map1.getOrDefault(c,0)<=map2.getOrDefault(c,0)){
                    mct++;
                }
            }
            while(j<i&&mct==dct){
                f2=true;
                String temp=s.substring(j+1,i+1);
                if(ans.length()==0||temp.length()<ans.length()){
                    ans=temp;
                }
                j++;
                char ch=s.charAt(j);
                if(map1.get(ch)==1){
                    map1.remove(ch);
                }
                else{
                    map1.put(ch,map1.get(ch)-1);
                }
                if(map1.getOrDefault(ch,0)<map2.getOrDefault(ch,0)){
                    mct--;
                }
            }
            if(f1==false&&f2==false){
                break;
            }
        }
       return ans; 
    }
}
