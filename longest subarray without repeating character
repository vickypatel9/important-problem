

------------------------------------------  method -1 --------------------------------------------------------

import java.util.HashMap;

public class Solution {
        
	public static int lengthOfLongestSubstring(String s) {
        
        // Declaring a HashMap to store the last occurence of the character.
	    HashMap<Character, Integer> map = new HashMap();
        	
        int start = 0, end = 0;

        // Declaring maxlen which will store the length of the longest substring without repeating characters.
        int maxLen = 0;
        		
        while(end < s.length()) {
            char c = s.charAt(end);
            		
            if(map.containsKey(c)) {
                start = Math.max(start, map.get(c) + 1);
            }

            // Updating maxLen.		
            maxLen = Math.max(maxLen, end - start + 1);

            // Storing the current occurence of character in HashMap.
            map.put(c, end);
            end++;
        }
        // Return maxlen which is storing the length of the longest substring without repeating characters.
        return maxLen;
	}
	
	-----------------------------------------------------   method -2 ----------------------------------------
	
	class Solution {
    public int lengthOfLongestSubstring(String s) {
        Set<Character>set=new HashSet<>();
        int maxLength=0;
        int left=0;
        int right=0;
        while(right<s.length()){
           
            if(!set.contains(s.charAt(right))){
                set.add(s.charAt(right));
                maxLength=Math.max(maxLength,right-left+1);
                
            }else{
                while(s.charAt(left)!=s.charAt(right)){
                    set.remove(s.charAt(left));
                    left++;
                }
                set.remove(s.charAt(left));
                left++;
                set.add(s.charAt(right));
            }
            right++;
            
        }
        return maxLength;
    }
}
