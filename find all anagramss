class Solution {
public static boolean compare(HashMap<Character,Integer>p,HashMap<Character,Integer>s){
     for(char c:s.keySet()){
         if(p.getOrDefault(c,0)!=s.get(c))
             return false;
          }
         return true;
       }
    public List<Integer> findAnagrams(String s, String p) {
         ArrayList<Integer>ans=new ArrayList<>();
        if(p.length()>s.length()) return ans;
        HashMap <Character,Integer> sh=new HashMap<>();
        HashMap <Character,Integer> ph=new HashMap<>();
        for(int i=0;i<p.length();i++){
            char ch=p.charAt(i);
            ph.put(ch,ph.getOrDefault(ch,0)+1);
        }
         for(int i=0;i<p.length();i++){
             char ch=s.charAt(i);
            sh.put(ch,sh.getOrDefault(ch,0)+1);
        }
           int j=0;
          int i=p.length();
          while(i<s.length()){
          
            if(compare(ph,sh)){                       // adding answer
               ans.add(i-p.length()); 
            }
            
            char ch=s.charAt(i);                           // aquiring
             sh.put(ch,sh.getOrDefault(ch,0)+1);
             
              char chr=s.charAt(i-p.length());          // releasing
            if(sh.get(chr)==1){
                sh.remove(chr);
            }
            else{
                sh.put(chr,sh.get(chr)-1);
            }
            i++;
          }
          // comparing last set of element present in map
         if(compare(sh,ph)){
         ans.add(i-p.length());
         }
        return ans;
    }
}
